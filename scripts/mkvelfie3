#! /bin/csh -f
#
#  mkvelfie3:    make a velocity field with smoothing
#
#  checking on the 3 methods, they check out now.
#  rms in V diff-method-maps now ~0.05 km/s on 100 km/s
#  The S difference is more interesting, this is where the
#  interesting analysis will be.  The difference map
#  is analagous to the sigma map itself, enhanced in center,
#  flat in outer parts.

#  parameters, can be changed by the user via the commandline
set run=model1             # identification, and basename for all files
set nbody=1000000          # number of bodies per model
set r0=2                   # turnover radius
set v0=100                 # peak velocity
set m0=2                   # shape coefficient
set re=2                   # exponential scalelength of disk
set rmax=15                # edge of disk

set pa=90                  # PA of disk on sky (E through N)
set inc=45                 # INC of disk
set beam=0.2               # FWHM of (smaller) beam
set vbeam=0                # FWHM of spectral smoothing beam 
set range=16               # gridding from -range:range 
set vrange=150             # velocity gridding -vrange:vrange
set nsize=193              # number of pixels in gridding (px=py=2*range/nx)
set nvel=121               # number of pixels in velocity

set z0=0.0                 # scaleheight of disk (density)
set z1=0.0                 # scaleheight of disk (velocity) [new model]
set vloss=0.0              # loss in rotation speed at higher latitudes [old model]

set seed=0                 # random seed
set frac=5                 # fraction random motion

set noise=0                # add optional noise to cube
set clip=0                 # clipping level for cube

#  parse the command line arguments (they will then override the above defaults)

foreach a ($*)
  set $a
end

#
if ($?NEMO == 0) then
  echo NEMO has not been loaded in your shell
  exit 1
endif


#  derive some parameters that appear common or logically belong together

set grid_pars=(xrange=-${range}:${range} yrange=-${range}:${range} nx=$nsize ny=$nsize)
set cell=`nemoinp "2*$range/$nsize*60"`
set cen=`nemoinp $nsize/2-0.5`

#  keep a log, in case we call this routine multiple times
echo `date` :: $* >> $run.history

# ================================================================================ START

rm -f $run.* >& /dev/null

echo Creating homogeneous disk with $nbody particles times

#     snapmass - - "mass=exp(-r/$re)" |\
#     snapmass - - "mass="1/r" |\

mkdisk out=- nbody=$nbody seed=$seed z0=$z0,$z1 vloss=$vloss \
       potname=rotcurm potpars=0,$v0,$r0,$m0 mass=1 sign=-1 frac=$frac abs=t rmax=$rmax |\
    snaprotate - $run.20 "$inc,$pa" yz

echo "Creating the beam"
mkplummer - 1 | snapgrid - $run.p1 $grid_pars
ccdsmooth $run.p1 $run.beam $beam

echo "Creating a velocity field - method 1: snapgrid+mom; ccdsmooth; ccdmath"
snapgrid $run.20 $run.21 $grid_pars moment=0 evar=m
snapgrid $run.20 $run.22 $grid_pars moment=1 evar=m
snapgrid $run.20 $run.23 $grid_pars moment=2 evar=m
ccdsmooth $run.21 $run.21c $beam
ccdsmooth $run.22 $run.22c $beam
ccdsmooth $run.23 $run.23c $beam
ccdmath $run.21c,$run.22c,$run.23c $run.20d %1
ccdmath $run.21c,$run.22c,$run.23c $run.20v "%2/%1"
ccdmath $run.21c,$run.22c,$run.23c $run.20s "sqrt(%3/%1-%2*%2/(%1*%1))"
#  cutoff
ccdmath $run.20d,$run.21 $run.21d "ifgt(%2,0,%1,0)"
ccdmath $run.20v,$run.21 $run.21v "ifgt(%2,0,%1,0)"
ccdmath $run.20s,$run.21 $run.21s "ifgt(%2,0,%1,0)"


echo "Creating a velocity field - method 2: snapgrid; ccdsmooth; ccdmom+mom;"
snapgrid $run.20 $run.30 $grid_pars zrange=-${vrange}:${vrange} nz=$nvel mean=f evar=m
ccdmom $run.30 $run.mask axis=3 mom=0
# ccdstat $run.30
if ($vbeam == 0) then
  ccdmath $run.30 $run.31 "%1+rang(0,$noise)"
else
  ccdmath $run.30 -       "%1+rang(0,$noise)" | ccdsmooth - $run.31 $vbeam z
endif
ccdsmooth $run.31 $run.32 $beam   
# ccdstat $run.32
ccdmom $run.32 $run.33d axis=3 mom=0 clip=$clip
ccdmom $run.32 $run.33v axis=3 mom=1 clip=$clip rngmsk=true
ccdmom $run.32 $run.33s axis=3 mom=2 clip=$clip

ccdmom $run.32 $run.34v axis=3 mom=3  peak=0 clip=$clip  # peak
ccdmom $run.32 $run.35v axis=3 mom=31 peak=0 clip=$clip
ccdmom $run.32 $run.36v axis=3 mom=31 peak=1 clip=$clip  # peak


# slow because snapgrid does the point by point beam smearing
# but it is what best matches how a telescope operates

echo "Creating a velocity field - method 3: snapgrid+smooth; ccdmath"
snapgrid $run.20 $run.41 $grid_pars moment=0 evar=m svar=$beam/2.35482
snapgrid $run.20 $run.42 $grid_pars moment=1 evar=m svar=$beam/2.35482
snapgrid $run.20 $run.43 $grid_pars moment=2 evar=m svar=$beam/2.35482
ccdmath $run.41,$run.42,$run.43 $run.40d %1
ccdmath $run.41,$run.42,$run.43 $run.40v "%2/%1"
ccdmath $run.41,$run.42,$run.43 $run.40s "sqrt(%3/%1-%2*%2/(%1*%1))"
#  cutoff
ccdmath $run.40d,$run.41 $run.41d "ifgt(%2,0,%1,0)"
ccdmath $run.40v,$run.41 $run.41v "ifgt(%2,0,%1,0)"
ccdmath $run.40s,$run.41 $run.41s "ifgt(%2,0,%1,0)"

# masked versions

ccdmath $run.21d,$run.mask $run.29dm 'ifeq(%2,0,0,%1)'
ccdmath $run.21v,$run.mask $run.29vm 'ifeq(%2,0,0,%1)'
ccdmath $run.21s,$run.mask $run.29sm 'ifeq(%2,0,0,%1)'

ccdmath $run.33d,$run.mask $run.39dm 'ifeq(%2,0,0,%1)'
ccdmath $run.33v,$run.mask $run.39vm 'ifeq(%2,0,0,%1)'
ccdmath $run.33s,$run.mask $run.39sm 'ifeq(%2,0,0,%1)'

ccdmath $run.41d,$run.mask $run.49dm 'ifeq(%2,0,0,%1)'
ccdmath $run.41v,$run.mask $run.49vm 'ifeq(%2,0,0,%1)'
ccdmath $run.41s,$run.mask $run.49sm 'ifeq(%2,0,0,%1)'



# PV slice based on $nsize/2
ccdslice $run.31 - y $nsize/2-1:$nsize/2 | ccdmom - $run.pv 3 -1


# single dish profile ('the busy function')
# http://adsabs.harvard.edu/abs/2014MNRAS.438.1176W
# https://github.com/RussellJurek/busy-function-fitting
ccdmom $run.32 - axis=1 mom=0 |\
 ccdmom - - axis=2 mom=0 |\
  ccdprint - x= y= z= label=z newline=t |\
  tabcomment - - punct=f delete=t > $run.spec

# export for barolo or so, in decent units (could also use ccdsky)
# for ALMA at (12h,-30d)
ccdfits $run.32 $run.fits radecvel=t scale=1/60.0/8,1/60.0/8,1000.0 vsys=0 crpix=$nsize/2+1,$nsize/2+1,$nvel/2+1 crval=180,-30,0



